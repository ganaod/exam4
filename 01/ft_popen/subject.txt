Assignment name  : ft_popen
Expected files   : ft_popen.c
Allowed functions: pipe, fork, dup2, execvp, close, exit

Write the following function:
	int ft_popen(const char *file, char *const argv[], char type);

The function must launch the executable file with the arguments argv (using execvp)
If type is 'r' the function must return a file descriptor connected to the output of the command
If type is 'w' the function must return a file descriptor connected to the input of the command
In case of error or invalid parameter the function must return -1

Do not leak file descriptors


Example usage:

int main()
{
    int  fd;
    char *line;

    fd = ft_popen("ls", (char *const []){"ls", NULL}, 'r');
    while ((line = get_next_line(fd)))
        ft_putstr(line);
    return (0);
}


int	main() {
	int	fd = ft_popen("ls", (char *const []){"ls", NULL}, 'r');
	dup2(fd, 0);
	fd = ft_popen("grep", (char *const []){"grep", "c", NULL}, 'r');
	char	*line;
	while ((line = get_next_line(fd)))
		printf("%s", line);
}


// Read output from a command
int main()
* {
*     int fd;
*     char buffer[1024];
*     ssize_t bytes;
* 
*     fd = ft_popen("ls", (char *const []){"ls", "-l", NULL}, 'r');
*     if (fd == -1)
*         return 1;
* 
*     while ((bytes = read(fd, buffer, sizeof(buffer) - 1)) > 0)
*     {
*         buffer[bytes] = '\0';
*         printf("%s", buffer);
*     }
* 
*     close(fd);
*     return 0;
* }
* 
* // Write input to a command
* int main()
* {
*     int fd;
*     
*     fd = ft_popen("wc", (char *const []){"wc", "-l", NULL}, 'w');
*     if (fd == -1)
*         return 1;
* 
*     write(fd, "line 1\n", 7);
*     write(fd, "line 2\n", 7);
*     write(fd, "line 3\n", 7);
* 
*     close(fd);  // wc will show "3"
*     return 0;
* }